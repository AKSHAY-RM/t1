/*--------------------------------------------------------------------------
 *  Filename	:	clinetserverfiletransfer.cpp
 * 	Author		:	Akshay R M
 *	Purpose		:	This file contains a class definition for handling
 *                  client-server file transfers using UDP sockets.
 *	System		:	Client-Server Communication System
 *	Module 		: 	File Transfer Module
 *	Create date	:	12/09/24
 ----------------------------------------------------------------------------*/

#include "clientserverfiletransfer.h"
#include <QCoreApplication>
#include <QDir>
#include <QTimer>
#include <QDataStream>
#include <QThread>
#include <QFileInfo>

/*--------------------------------------------------------------------
 * Purpose : Constructor for ClientServerFileTransfer class.
 *           Initializes the object with file path, IP address,
 *           port number, and send/receive mode. Sets up the UDP
 *           socket for data transfer.
 * Return :  None
--------------------------------------------------------------------- */
ClientServerFileTransfer::ClientServerFileTransfer(QString qStrFilePath, QString qStrIP, UINT_32_TYPE unPort, UINT_8_TYPE ucSendRcv)
    : m_qStrFilePath(qStrFilePath), m_qStrIPAddr(qStrIP), m_unPortNumber(unPort), m_ucSendRcv(ucSendRcv), m_unSequenceNumber(0), m_untemp(1) {
    
    m_qUDPSocket = new QUdpSocket(this); // Set parent to manage memory better

    if (ucSendRcv == 1) { // Receiver binding
        if (m_qUDPSocket->bind(QHostAddress::LocalHost, m_unPortNumber)) {
            // Connect signal for data reception
            connect(m_qUDPSocket, &QUdpSocket::readyRead, this, &ClientServerFileTransfer::v_DataReception);
        } else {
            qDebug() << "Failed to bind UDP socket for receiving." ;
        }
    } else if (ucSendRcv == 2) { // Sender mode
        m_qFP.setFileName(m_qStrFilePath);
        if (m_qFP.open(QIODevice::ReadOnly)) {
            m_unFileLength = m_qFP.size();
        } else {
            qDebug() << "Failed to open file for reading: " << m_qStrFilePath;
        }
    }
}

/*--------------------------------------------------------------------
 *	Purpose	: Destructor for ClientServerFileTransfer class.
 *            Releases system resources ,closes file handles and socket.
 *	Return  : None
 --------------------------------------------------------------------- */
ClientServerFileTransfer::~ClientServerFileTransfer() {
    // Close the file if it's currently open
    if (m_qFP.isOpen()) {
        m_qFP.close();
    }
}

/*--------------------------------------------------------------------
 *	Purpose	: Sends a file header packet to the receiver.
 *	Return  : None.
 --------------------------------------------------------------------- */
void ClientServerFileTransfer::v_SendFileHeader() {
    STDATAGRAM stHeaderDatagram;
    stHeaderDatagram.unDataGramType = 1; // Header
    stHeaderDatagram.unSequenceNumber = m_unSequenceNumber++;

    QByteArray qBaFileName = m_qStrFileName.toLocal8Bit();
    strncpy((char*)stHeaderDatagram.unDataGram.stHeader.aucFileName, qBaFileName.data(), file_Name_Length - 1);
    stHeaderDatagram.unDataGram.stHeader.aucFileName[file_Name_Length - 1] = '\0';
    stHeaderDatagram.unDataGram.stHeader.unFileLength = m_unFileLength;

    QByteArray qBaBuffer(reinterpret_cast<const char*>(&stHeaderDatagram), sizeof(STDATAGRAM));
    m_qUDPSocket->writeDatagram(qBaBuffer, QHostAddress::LocalHost, m_unPortNumber);
}

/*--------------------------------------------------------------------
 *	Purpose	: Sends a file footer packet to the receiver,
 *            indicating the end of the file transfer.
 *	Return  : None.
 --------------------------------------------------------------------- */
void ClientServerFileTransfer::v_SendFileFooter() {
    STDATAGRAM stFooterDatagram;
    stFooterDatagram.unDataGramType = 3; // Footer
    stFooterDatagram.unSequenceNumber = -1; // End of transfer

    QByteArray qBaFileName = m_qStrFileName.toLocal8Bit();
    strncpy((char*)stFooterDatagram.unDataGram.stFooter.aucFileName, qBaFileName.data(), file_Name_Length - 1);
    stFooterDatagram.unDataGram.stFooter.aucFileName[file_Name_Length - 1] = '\0';
    stFooterDatagram.unDataGram.stFooter.unFileLength = m_unFileLength;

    QByteArray qBaBuffer(reinterpret_cast<const char*>(&stFooterDatagram), sizeof(STDATAGRAM));
    m_qUDPSocket->writeDatagram(qBaBuffer, QHostAddress::LocalHost, m_unPortNumber);
}

/*--------------------------------------------------------------------
 *	Purpose	: Sends file data over UDP socket.
 *            Breaks down file into chunks, sends each chunk with sequence number,
 *            and waits for acknowledgment before sending next chunk.
 *	Return  : None
 --------------------------------------------------------------------- */
void ClientServerFileTransfer::v_SendFileData() {
    const UINT_32_TYPE unChunkSize = 60000; // Size of each chunk
    QByteArray qBafileChunk;
    STDATAGRAM stFiledatagram;
    stFiledatagram.unDataGramType = 2; // File data type
    m_unSequenceNumber = 1; // Reset sequence number

    qDebug() << "Total size of file to be sent to server: " << m_qFP.size();

    while (!(qBafileChunk = m_qFP.read(unChunkSize)).isEmpty()) {
        stFiledatagram.unSequenceNumber = m_unSequenceNumber;
        qDebug() << "Processing chunk with sequence number:" << m_unSequenceNumber;

        memcpy(stFiledatagram.unDataGram.stData.aucBuffer, qBafileChunk.data(), qBafileChunk.size());
        stFiledatagram.unDataGram.stData.unSize = qBafileChunk.size();
        QByteArray qBaBuffer(reinterpret_cast<const char*>(&stFiledatagram), sizeof(STDATAGRAM));

        while (true) {
            m_qUDPSocket->writeDatagram(qBaBuffer, QHostAddress::LocalHost, m_unPortNumber);
            QThread::msleep(100); // Sleep before checking for acknowledgment

            if (b_WaitForAcknowledgment()) {
                qDebug() << "Chunk with sequence number:" << m_unSequenceNumber << " successfully sent.";
                m_unSequenceNumber++;
                break; // Proceed to the next chunk
            } else {
                qDebug() << "Error sending chunk with sequence number:" << m_unSequenceNumber << ". Retrying...";
            }
        }
    }
}

/*--------------------------------------------------------------------
 * Purpose	: Receives data from the sender and processes it accordingly.
 *            This function runs in an infinite loop, continuously checking
 *            for incoming datagrams.
 * Return    : None
 *--------------------------------------------------------------------- */
void ClientServerFileTransfer::v_DataReception() {
    while (true) {
        if (m_qUDPSocket->hasPendingDatagrams()) {
            QByteArray qBaBuffer;
            qBaBuffer.resize(m_qUDPSocket->pendingDatagramSize());
            INT_64_TYPE bytesRead = m_qUDPSocket->readDatagram(qBaBuffer.data(), qBaBuffer.size(), &m_qsender, &m_qunsenderPort);

            if (bytesRead == -1) {
                qDebug() << "Error reading datagram.";
                continue; // Retry reading
            }

            STDATAGRAM* stReceiverData = reinterpret_cast<STDATAGRAM*>(qBaBuffer.data());
            switch (stReceiverData->unDataGramType) {
                case 1: // File Header
                    b_RcvFileHeader(stReceiverData);
                    break;
                case 2: // File Data
                    b_RcvFileData(stReceiverData);
                    break;
                case 3: // File Footer
                    b_RcvFileFooter(stReceiverData);
                    qDebug() << "Final file size: " << m_qFP.size();
                    return; // End reception loop
                default:
                    qDebug() << "Unknown datagram type received." ;
                    break;
            }
        } else {
            QThread::msleep(10); // Sleep briefly to avoid busy waiting
        }
    }
}

/*--------------------------------------------------------------------
 *	Purpose	: Receives a file header datagram and processes it accordingly.
 *              This function creates the directory and file for receiving the file data.
 *--------------------------------------------------------------------- */
bool ClientServerFileTransfer::b_RcvFileHeader(STDATAGRAM* stReceiverData) {
    QString qStrFileFolderName = m_qStrFilePath;
    QString qStrFileName = QString::fromUtf8((const char*)stReceiverData->unDataGram.stHeader.aucFileName);
    QDir dir(qStrFileFolderName);

    // Check if the directory already exists and try to remove it recursively
    if (dir.exists() && !dir.removeRecursively()) {
        qDebug() << "Failed to delete existing directory and its contents." ;
        return false;
    }

    // Try to create the directory
    if (!dir.mkpath(qStrFileFolderName)) {
        qDebug() << "Failed to create directory for received file." ;
        return false;
    }

    // Set up file for writing
    m_qStrFileName = qStrFileName;
    QFile qFile(m_qStrFilePath + "/" + m_qStrFileName);

    if (!qFile.open(QIODevice::WriteOnly)) {
        qDebug() << "Failed to open file for writing: " << m_qStrFileName;
        return false;
    }

    qDebug() << "Receiving file: " << m_qStrFileName << ", Size: " << stReceiverData->unDataGram.stHeader.unFileLength;
    return true;
}

/*--------------------------------------------------------------------
 *	Purpose	: Receives file data and writes it to the output file.
 *	Return  : None
 --------------------------------------------------------------------- */
bool ClientServerFileTransfer::b_RcvFileData(STDATAGRAM* stReceiverData) {
    if (m_qFP.isOpen()) {
        m_qFP.write(reinterpret_cast<const char*>(stReceiverData->unDataGram.stData.aucBuffer), stReceiverData->unDataGram.stData.unSize);
        // Acknowledge receipt of the data
        sendAcknowledgment(stReceiverData->unSequenceNumber);
        return true;
    } else {
        qDebug() << "File is not open for writing.";
        return false;
    }
}

/*--------------------------------------------------------------------
 *	Purpose	: Sends an acknowledgment for a received data chunk.
 *	Return  : None
 --------------------------------------------------------------------- */
void ClientServerFileTransfer::sendAcknowledgment(UINT_32_TYPE sequenceNumber) {
    // Create acknowledgment datagram
    STDATAGRAM ackDatagram;
    ackDatagram.unDataGramType = 4; // Acknowledgment type
    ackDatagram.unSequenceNumber = sequenceNumber;

    QByteArray qBaBuffer(reinterpret_cast<const char*>(&ackDatagram), sizeof(STDATAGRAM));
    m_qUDPSocket->writeDatagram(qBaBuffer, m_qsender, m_qunsenderPort); // Send back acknowledgment to sender
}

/*--------------------------------------------------------------------
 *	Purpose	: Receives a footer datagram and finalizes the file reception process.
 *	Return  : None
 --------------------------------------------------------------------- */
bool ClientServerFileTransfer::b_RcvFileFooter(STDATAGRAM* stReceiverData) {
    // Finalize file reception and close the file
    if (m_qFP.isOpen()) {
        m_qFP.close(); // Close the file after finishing
        qDebug() << "File transfer completed. " << m_qStrFileName;
        return true;
    } else {
        qDebug() << "File is not open for writing." ;
        return false;
    }
}

/*--------------------------------------------------------------------
 *	Purpose	: Waits for acknowledgment from the receiver.
 *	Return  : true if acknowledgment is received, false otherwise.
 --------------------------------------------------------------------- */
bool ClientServerFileTransfer::b_WaitForAcknowledgment() {
    // This function can be enhanced with a timeout mechanism
    for (int i = 0; i < 10; ++i) {
        if (m_qUDPSocket->hasPendingDatagrams()) {
            QByteArray qBaBuffer;
            qBaBuffer.resize(m_qUDPSocket->pendingDatagramSize());
            m_qUDPSocket->readDatagram(qBaBuffer.data(), qBaBuffer.size(), &m_qsender, &m_qunsenderPort);
            STDATAGRAM* stReceiverData = reinterpret_cast<STDATAGRAM*>(qBaBuffer.data());
            if (stReceiverData->unDataGramType == 4) { // Acknowledgment type
                qDebug() << "Acknowledgment received for sequence number:" << stReceiverData->unSequenceNumber;
                return true; // Acknowledgment received
            }
        }
        QThread::msleep(100); // Wait before retrying
    }
    return false; // Acknowledgment not received in the expected time
}
